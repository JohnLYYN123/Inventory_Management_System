/* 
PostgreSQL contain 5 tables: Users, Inventory, DeviceType, Request, and Transaction.
The table relation of our database design:
User (1) ↔ (M) Request
A user can make multiple requests, but each request belongs to a single user.

User (1) ↔ (M) Transaction 
A user can execute multiple transactions (borrowing, returning devices, etc.).

Inventory (1) ↔ (M) Request
A device can be requested multiple times, but each request is for a single device.

Inventory (1) ↔ (M) Transaction
A device can have multiple transactions (borrowed, returned, retired).

DeviceType (1) ↔ (M) Inventory
A device type can have multiple devices.
*/
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  userName     String        @unique
  email        String        @unique
  department   String?
  location     String?
  displayName  String?
  password     String
  role         Role
  createTime   DateTime      @default(now())
  updateTime   DateTime      @updatedAt
  requests     Request[]     @relation("UserRequests")
  transactions Transaction[] @relation("UserTransactions")
  inventories  Inventory[]   @relation("UserInventories")
}

model DeviceType {
  id              Int         @id @default(autoincrement())
  deviceTypeName  String      @unique
  createTime      DateTime    @default(now())
  updateTime      DateTime    @updatedAt
  inventories     Inventory[] @relation("DeviceTypeInventory")
}

model Inventory {
  id           Int           @id @default(autoincrement())
  deviceName   String
  status       Status
  createTime   DateTime      @default(now())
  updateTime   DateTime      @updatedAt
  
  deviceTypeId Int
  deviceType   DeviceType    @relation("DeviceTypeInventory", fields: [deviceTypeId], references: [id])
  
  deviceUserId Int?
  deviceUser   User?         @relation("UserInventories",fields:[deviceUserId],references:[id])
  requests     Request[]     @relation("InventoryRequests")
  transactions Transaction[] @relation("InventoryTransactions")
}

model Request {
  id            Int           @id @default(autoincrement())
  requestTime   DateTime      @default(now())
  status        RequestStatus
  adminComment  String?
  requestDetail String?
  createTime    DateTime      @default(now())
  updateTime    DateTime      @updatedAt
  requestorId   Int
  deviceId      Int
  device        Inventory     @relation("InventoryRequests", fields: [deviceId], references: [id])
  requestor     User          @relation("UserRequests", fields: [requestorId], references: [id])
}

model Transaction {
  id           Int       @id @default(autoincrement())
  activity     Activity
  activityTime DateTime  @default(now())
  file         String?
  comment      String?
  createTime   DateTime  @default(now())
  updateTime   DateTime  @updatedAt
  deviceId     Int
  executorId   Int
  device       Inventory @relation("InventoryTransactions", fields: [deviceId], references: [id])
  executor     User      @relation("UserTransactions", fields: [executorId], references: [id])
}

enum Role {
  User
  Admin
}

enum Status {
  Available
  Unavailable
  Pending
  Retired
}

enum RequestStatus {
  Completed
  Denied
  Pending
}

enum Activity {
  Borrow
  Return
  Retired
}